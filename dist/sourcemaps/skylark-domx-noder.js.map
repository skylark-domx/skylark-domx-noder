{"version":3,"sources":["skylark-domx-noder.js"],"names":["define","skylark","langx","browser","styler","isIE","navigator","userAgent","match","fragmentRE","singleTagRE","div","document","createElement","table","tableBody","tableRow","containers","tr","tbody","thead","tfoot","td","th","*","rootNodeRE","map","Array","prototype","slice","ensureNodes","nodes","copyByClone","isArrayLike","call","node","cloneNode","flatten","nodeName","elm","chkName","name","toLowerCase","undefined","enhancePlaceContent","placing","isFunction","apply","neddsFlattern","i","length","append","parentNode","appendChild","this","tag","props","parent","setAttribute","rxhtmlTag","isChildOf","directly","documentElement","contains","ownerDoc","nodeType","ownerDocument","noder","mixin","active","doc","el","activeElement","error","body","blur","clone","deep","self","each","getAttribs","attr","setAttrib","getAttrib","contents","contentDocument","childNodes","createFragment","html","trim","test","RegExp","$1","container","innerHTML","dom","forEach","removeChild","child","createTextNode","text","empty","hasChildNodes","firstChild","fullScreen","exitFullScreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","requestFullScreen","focusable","element","hasTabindex","mapName","img","focusableIfVisible","fieldset","href","$","is","disabled","closest","visible","isString","replace","isNumber","isDocument","DOCUMENT_NODE","isInDocument","isWindow","offsetParent","css","ownerWindow","defaultView","parentWindow","after","refNode","nextSibling","insertBefore","before","prepend","remove","e","console","warn","children","oldNode","replaceChild","throb","params","timer","time","style","callback","throbber","class","className","overlayDiv","position","top","left","width","height","zIndex","opacity","overlay","textNode","clearTimeout","setTimeout","update","nodeValue","traverse","fn","len","reverse","wrapper","wrapperNode","wrapperInner","unwrap","isDoc","attach","main"],"mappings":"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","file":"../skylark-domx-noder.js","sourcesContent":["define('skylark-domx-noder/noder',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-styler\"\r\n], function(skylark, langx, browser, styler) {\r\n    var isIE = !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g),\r\n        fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\r\n        singleTagRE = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\r\n        div = document.createElement(\"div\"),\r\n        table = document.createElement('table'),\r\n        tableBody = document.createElement('tbody'),\r\n        tableRow = document.createElement('tr'),\r\n        containers = {\r\n            'tr': tableBody,\r\n            'tbody': table,\r\n            'thead': table,\r\n            'tfoot': table,\r\n            'td': tableRow,\r\n            'th': tableRow,\r\n            '*': div\r\n        },\r\n        rootNodeRE = /^(?:body|html)$/i,\r\n        map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n\r\n    function ensureNodes(nodes, copyByClone) {\r\n        if (!langx.isArrayLike(nodes)) {\r\n            nodes = [nodes];\r\n        }\r\n        if (copyByClone) {\r\n            nodes = map.call(nodes, function(node) {\r\n                return node.cloneNode(true);\r\n            });\r\n        }\r\n        return langx.flatten(nodes);\r\n    }\r\n\r\n    function nodeName(elm, chkName) {\r\n        var name = elm.nodeName && elm.nodeName.toLowerCase();\r\n        if (chkName !== undefined) {\r\n            return name === chkName.toLowerCase();\r\n        }\r\n        return name;\r\n    };\r\n\r\n\r\n    function activeElement(doc) {\r\n        doc = doc || document;\r\n        var el;\r\n\r\n        // Support: IE 9 only\r\n        // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\r\n        try {\r\n            el = doc.activeElement;\r\n        } catch ( error ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 9 - 11 only\r\n        // IE may return null instead of an element\r\n        // Interestingly, this only seems to occur when NOT in an iframe\r\n        if ( !el ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 11 only\r\n        // IE11 returns a seemingly empty object in some cases when accessing\r\n        // document.activeElement from an <iframe>\r\n        if ( !el.nodeName ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        return el;\r\n    };\r\n\r\n    function enhancePlaceContent(placing,node) {\r\n        if (langx.isFunction(placing)) {\r\n            return placing.apply(node,[]);\r\n        }\r\n        if (langx.isArrayLike(placing)) {\r\n            var neddsFlattern;\r\n            for (var i=0;i<placing.length;i++) {\r\n                if (langx.isFunction(placing[i])) {\r\n                    placing[i] = placing[i].apply(node,[]);\r\n                    if (langx.isArrayLike(placing[i])) {\r\n                        neddsFlattern = true;\r\n                    }\r\n                }\r\n            }\r\n            if (neddsFlattern) {\r\n                placing = langx.flatten(placing);\r\n            }\r\n        }\r\n        return placing;\r\n    }\r\n    function after(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone),\r\n                refNode = refNode.nextSibling;\r\n\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                if (refNode) {\r\n                    parent.insertBefore(nodes[i], refNode);\r\n                } else {\r\n                    parent.appendChild(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function append(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var parentNode = node,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            parentNode.appendChild(nodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function before(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone);\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                parent.insertBefore(nodes[i], refNode);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /*   \r\n     * Get the children of the specified node, including text and comment nodes.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contents(elm) {\r\n        if (nodeName(elm, \"iframe\")) {\r\n            return elm.contentDocument;\r\n        }\r\n        return elm.childNodes;\r\n    }\r\n\r\n    /*   \r\n     * Create a element and set attributes on it.\r\n     * @param {HTMLElement} tag\r\n     * @param {props} props\r\n     * @param } parent\r\n     */\r\n    function createElement(tag, props, parent) {\r\n        var node = document.createElement(tag);\r\n        if (props) {\r\n            for (var name in props) {\r\n                node.setAttribute(name, props[name]);\r\n            }\r\n        }\r\n        if (parent) {\r\n            append(parent, node);\r\n        }\r\n        return node;\r\n    }\r\n\r\n    /*   \r\n     * Create a DocumentFragment from the HTML fragment.\r\n     * @param {String} html\r\n     */\r\n    function createFragment(html) {\r\n        // A special case optimization for a single tag\r\n        html = langx.trim(html);\r\n        if (singleTagRE.test(html)) {\r\n            return [createElement(RegExp.$1)];\r\n        }\r\n\r\n        var name = fragmentRE.test(html) && RegExp.$1\r\n        if (!(name in containers)) {\r\n            name = \"*\"\r\n        }\r\n        var container = containers[name];\r\n        container.innerHTML = \"\" + html;\r\n        dom = slice.call(container.childNodes);\r\n\r\n        dom.forEach(function(node) {\r\n            container.removeChild(node);\r\n        })\r\n\r\n        return dom;\r\n    }\r\n\r\n    /*   \r\n     * Create a deep copy of the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {Boolean} deep\r\n     */\r\n    function clone(node, deep) {\r\n        var self = this,\r\n            clone;\r\n\r\n        // TODO: Add feature detection here in the future\r\n        if (!isIE || node.nodeType !== 1 || deep) {\r\n            return node.cloneNode(deep);\r\n        }\r\n\r\n        // Make a HTML5 safe shallow copy\r\n        if (!deep) {\r\n            clone = document.createElement(node.nodeName);\r\n\r\n            // Copy attribs\r\n            each(self.getAttribs(node), function(attr) {\r\n                self.setAttrib(clone, attr.nodeName, self.getAttrib(node, attr.nodeName));\r\n            });\r\n\r\n            return clone;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node .\r\n     * @param {String} node\r\n     * @param {Node} child\r\n     */\r\n    function contains(node, child) {\r\n        return isChildOf(child, node);\r\n    }\r\n\r\n    /*   \r\n     * Create a new Text node.\r\n     * @param {String} text\r\n     * @param {Node} child\r\n     */\r\n    function createTextNode(text) {\r\n        return document.createTextNode(text);\r\n    }\r\n\r\n    /*   \r\n     * Get the current document object.\r\n     */\r\n    function doc() {\r\n        return document;\r\n    }\r\n\r\n    /*   \r\n     * Remove all child nodes of the set of matched elements from the DOM.\r\n     * @param {Object} node\r\n     */\r\n    function empty(node) {\r\n        while (node.hasChildNodes()) {\r\n            var child = node.firstChild;\r\n            node.removeChild(child);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    var fulledEl = null;\r\n\r\n    function fullScreen(el) {\r\n        if (el === false) {\r\n            browser.exitFullScreen.apply(document);\r\n        } else if (el) {\r\n            browser.requestFullScreen.apply(el);\r\n            fulledEl = el;\r\n        } else {\r\n            return (\r\n                document.fullscreenElement ||\r\n                document.webkitFullscreenElement ||\r\n                document.mozFullScreenElement ||\r\n                document.msFullscreenElement\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    // Selectors\r\n    function focusable( element, hasTabindex ) {\r\n        var map, mapName, img, focusableIfVisible, fieldset,\r\n            nodeName = element.nodeName.toLowerCase();\r\n\r\n        if ( \"area\" === nodeName ) {\r\n            map = element.parentNode;\r\n            mapName = map.name;\r\n            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== \"map\" ) {\r\n                return false;\r\n            }\r\n            img = $( \"img[usemap='#\" + mapName + \"']\" );\r\n            return img.length > 0 && img.is( \":visible\" );\r\n        }\r\n\r\n        if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {\r\n            focusableIfVisible = !element.disabled;\r\n\r\n            if ( focusableIfVisible ) {\r\n\r\n                // Form controls within a disabled fieldset are disabled.\r\n                // However, controls within the fieldset's legend do not get disabled.\r\n                // Since controls generally aren't placed inside legends, we skip\r\n                // this portion of the check.\r\n                fieldset = $( element ).closest( \"fieldset\" )[ 0 ];\r\n                if ( fieldset ) {\r\n                    focusableIfVisible = !fieldset.disabled;\r\n                }\r\n            }\r\n        } else if ( \"a\" === nodeName ) {\r\n            focusableIfVisible = element.href || hasTabindex;\r\n        } else {\r\n            focusableIfVisible = hasTabindex;\r\n        }\r\n\r\n        return focusableIfVisible && $( element ).is( \":visible\" ) && visible( $( element ) );\r\n    };\r\n\r\n\r\n   var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi;\r\n \r\n    /*   \r\n     * Get the HTML contents of the first element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} html\r\n     */\r\n    function html(node, html) {\r\n        if (html === undefined) {\r\n            return node.innerHTML;\r\n        } else {\r\n            this.empty(node);\r\n            html = html || \"\";\r\n            if (langx.isString(html)) {\r\n                html = html.replace( rxhtmlTag, \"<$1></$2>\" );\r\n            }\r\n            if (langx.isString(html) || langx.isNumber(html)) {               \r\n                node.innerHTML = html;\r\n            } else if (langx.isArrayLike(html)) {\r\n                for (var i = 0; i < html.length; i++) {\r\n                    node.appendChild(html[i]);\r\n                }\r\n            } else {\r\n                node.appendChild(html);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node.\r\n     * @param {Node} node\r\n     * @param {Node} parent\r\n     * @param {Node} directly\r\n     */\r\n    function isChildOf(node, parent, directly) {\r\n        if (directly) {\r\n            return node.parentNode === parent;\r\n        }\r\n        if (document.documentElement.contains) {\r\n            return parent.contains(node);\r\n        }\r\n        while (node) {\r\n            if (parent === node) {\r\n                return true;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a document.\r\n     * @param {Node} node\r\n     */\r\n    function isDocument(node) {\r\n        return node != null && node.nodeType == node.DOCUMENT_NODE\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is in the document\r\n     * @param {Node} node\r\n     */\r\n    function isInDocument(node) {\r\n      return (node === document.body) ? true : document.body.contains(node);\r\n    }        \r\n\r\n    /*   \r\n     * Get the owner document object for the specified element.\r\n     * @param {Node} elm\r\n     */\r\n    function ownerDoc(elm) {\r\n        if (!elm) {\r\n            return document;\r\n        }\r\n\r\n        if (elm.nodeType == 9) {\r\n            return elm;\r\n        }\r\n\r\n        return elm.ownerDocument;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function ownerWindow(elm) {\r\n        var doc = ownerDoc(elm);\r\n        return doc.defaultView || doc.parentWindow;\r\n    }\r\n\r\n    /*   \r\n     * insert one or more nodes as the first children of the specified node.\r\n     * @param {Node} node\r\n     * @param {Node or ArrayLike} placing\r\n     * @param {Boolean Optional} copyByClone\r\n     */\r\n    function prepend(node, placing, copyByClone) {\r\n        var parentNode = node,\r\n            refNode = parentNode.firstChild,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (refNode) {\r\n                parentNode.insertBefore(nodes[i], refNode);\r\n            } else {\r\n                parentNode.appendChild(nodes[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function offsetParent(elm) {\r\n        var parent = elm.offsetParent || document.body;\r\n        while (parent && !rootNodeRE.test(parent.nodeName) && styler.css(parent, \"position\") == \"static\") {\r\n            parent = parent.offsetParent;\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     * @param {Node} params\r\n     */\r\n    function overlay(elm, params) {\r\n        var overlayDiv = createElement(\"div\", params);\r\n        styler.css(overlayDiv, {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            zIndex: 0x7FFFFFFF,\r\n            opacity: 0.7\r\n        });\r\n        elm.appendChild(overlayDiv);\r\n        return overlayDiv;\r\n\r\n    }\r\n\r\n    /*   \r\n     * Remove the set of matched elements from the DOM.\r\n     * @param {Node} node\r\n     */\r\n    function remove(node) {\r\n        if (node && node.parentNode) {\r\n            try {\r\n                node.parentNode.removeChild(node);\r\n            } catch (e) {\r\n                console.warn(\"The node is already removed\", e);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function removeChild(node,children) {\r\n        if (!langx.isArrayLike(children)) {\r\n            children = [children];\r\n        }\r\n        for (var i=0;i<children.length;i++) {\r\n            node.removeChild(children[i]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function scrollParent( elm, includeHidden ) {\r\n        var position = styler.css(elm,\"position\" ),\r\n            excludeStaticParent = position === \"absolute\",\r\n            overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n            scrollParent = this.parents().filter( function() {\r\n                var parent = $( this );\r\n                if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                    return false;\r\n                }\r\n                return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                    parent.css( \"overflow-x\" ) );\r\n            } ).eq( 0 );\r\n\r\n        return position === \"fixed\" || !scrollParent.length ?\r\n            $( this[ 0 ].ownerDocument || document ) :\r\n            scrollParent;\r\n    };\r\n\r\n        /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {Node} node\r\n     * @param {Node} oldNode\r\n     */\r\n    function replace(node, oldNode) {\r\n        oldNode.parentNode.replaceChild(node, oldNode);\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {HTMLElement} elm\r\n     * @param {Node} params\r\n     */\r\n    function throb(elm, params) {\r\n        params = params || {};\r\n        var self = this,\r\n            text = params.text,\r\n            style = params.style,\r\n            time = params.time,\r\n            callback = params.callback,\r\n            timer,\r\n\r\n            throbber = this.createElement(\"div\", {\r\n                \"class\": params.className || \"throbber\"\r\n            }),\r\n            _overlay = overlay(throbber, {\r\n                \"class\": 'overlay fade'\r\n            }),\r\n            throb = this.createElement(\"div\", {\r\n                \"class\": \"throb\"\r\n            }),\r\n            textNode = this.createTextNode(text || \"\"),\r\n            remove = function() {\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                    timer = null;\r\n                }\r\n                if (throbber) {\r\n                    self.remove(throbber);\r\n                    throbber = null;\r\n                }\r\n            },\r\n            update = function(params) {\r\n                if (params && params.text && throbber) {\r\n                    textNode.nodeValue = params.text;\r\n                }\r\n            };\r\n        if (params.style) {\r\n            styler.css(throbber,params.style);\r\n        }\r\n        throb.appendChild(textNode);\r\n        throbber.appendChild(throb);\r\n        elm.appendChild(throbber);\r\n        var end = function() {\r\n            remove();\r\n            if (callback) callback();\r\n        };\r\n        if (time) {\r\n            timer = setTimeout(end, time);\r\n        }\r\n\r\n        return {\r\n            remove: remove,\r\n            update: update\r\n        };\r\n    }\r\n\r\n\r\n    /*   \r\n     * traverse the specified node and its descendants, perform the callback function on each\r\n     * @param {Node} node\r\n     * @param {Function} fn\r\n     */\r\n    function traverse(node, fn) {\r\n        fn(node)\r\n        for (var i = 0, len = node.childNodes.length; i < len; i++) {\r\n            traverse(node.childNodes[i], fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} node\r\n     */\r\n    function reverse(node) {\r\n        var firstChild = node.firstChild;\r\n        for (var i = node.children.length - 1; i > 0; i--) {\r\n            if (i > 0) {\r\n                var child = node.children[i];\r\n                node.insertBefore(child, firstChild);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around each element in the set of matched elements.\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapper(node, wrapperNode) {\r\n        if (langx.isString(wrapperNode)) {\r\n            wrapperNode = this.createFragment(wrapperNode).firstChild;\r\n        }\r\n        node.parentNode.insertBefore(wrapperNode, node);\r\n        wrapperNode.appendChild(node);\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around the content of each element in the set of matched\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapperInner(node, wrapperNode) {\r\n        var childNodes = slice.call(node.childNodes);\r\n        node.appendChild(wrapperNode);\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            wrapperNode.appendChild(childNodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Remove the parents of the set of matched elements from the DOM, leaving the matched\r\n     * @param {Node} node\r\n     */\r\n    function unwrap(node) {\r\n        var child, parent = node.parentNode;\r\n        if (parent) {\r\n            if (this.isDoc(parent.parentNode)) return;\r\n            parent.parentNode.insertBefore(node, parent);\r\n        }\r\n    }\r\n\r\n    function noder() {\r\n        return noder;\r\n    }\r\n\r\n    langx.mixin(noder, {\r\n        active  : activeElement,\r\n\r\n        blur : function(el) {\r\n            el.blur();\r\n        },\r\n\r\n        body: function() {\r\n            return document.body;\r\n        },\r\n\r\n        clone: clone,\r\n        contents: contents,\r\n\r\n        createElement: createElement,\r\n\r\n        createFragment: createFragment,\r\n\r\n        contains: contains,\r\n\r\n        createTextNode: createTextNode,\r\n\r\n        doc: doc,\r\n\r\n        empty: empty,\r\n\r\n        fullScreen: fullScreen,\r\n\r\n        focusable: focusable,\r\n\r\n        html: html,\r\n\r\n        isChildOf: isChildOf,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isInDocument: isInDocument,\r\n\r\n        isWindow: langx.isWindow,\r\n\r\n        nodeName : nodeName,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        ownerDoc: ownerDoc,\r\n\r\n        ownerWindow: ownerWindow,\r\n\r\n        after: after,\r\n\r\n        before: before,\r\n\r\n        prepend: prepend,\r\n\r\n        append: append,\r\n\r\n        remove: remove,\r\n\r\n        removeChild : removeChild,\r\n\r\n        replace: replace,\r\n\r\n        throb: throb,\r\n\r\n        traverse: traverse,\r\n\r\n        reverse: reverse,\r\n\r\n        wrapper: wrapper,\r\n\r\n        wrapperInner: wrapperInner,\r\n\r\n        unwrap: unwrap\r\n    });\r\n\r\n    return skylark.attach(\"domx.noder\" , noder);\r\n});\ndefine('skylark-domx-noder/main',[\r\n\t\"./noder\"\r\n],function(noder){\r\n\treturn noder;\r\n});\ndefine('skylark-domx-noder', ['skylark-domx-noder/main'], function (main) { return main; });\n\n"]}