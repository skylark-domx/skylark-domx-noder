{"version":3,"sources":["skylark-domx-noder.js"],"names":["define","skylark","langx","browser","isIE","navigator","userAgent","match","fragmentRE","singleTagRE","div","document","createElement","table","tableBody","tableRow","containers","tr","tbody","thead","tfoot","td","th","*","rootNodeRE","map","Array","prototype","slice","ensureNodes","nodes","copyByClone","isArrayLike","call","node","cloneNode","flatten","nodeName","elm","chkName","name","toLowerCase","undefined","enhancePlaceContent","placing","isFunction","apply","neddsFlattern","i","length","append","parentNode","appendChild","this","tag","props","attrs","parent","test","createElementNS","isHtmlNode","setAttribute","rxhtmlTag","isChildOf","directly","documentElement","contains","ownerDoc","nodeType","ownerDocument","isEditable","el","contentEditable","noder","mixin","active","doc","activeElement","error","body","after","refNode","nextSibling","insertBefore","before","blur","clone","deep","self","each","getAttribs","attr","setAttrib","getAttrib","child","contents","contentDocument","childNodes","createFragment","html","trim","RegExp","$1","container","innerHTML","xml","split","newXml","edsplit","removeSelfClosingTags","dom","forEach","removeChild","createTextNode","text","empty","hasChildNodes","firstChild","generateId","str","tagName","className","src","href","textContent","sum","charCodeAt","toString","fullScreen","exitFullScreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","requestFullScreen","focusable","element","hasTabindex","mapName","img","focusableIfVisible","fieldset","$","is","disabled","closest","visible","fromPoint","x","y","elementFromPoint","isString","replace","isNumber","isActive","elem","type","isDocument","DOCUMENT_NODE","isElement","isInDocument","isInFrame","window","isInput","isTextNode","isWindow","offsetParent","defaultView","getComputedStyle","position","ownerWindow","parentWindow","prepend","reflow","offsetHeight","remove","e","console","warn","children","oldNode","replaceChild","selectable","style","onselectstart","MozUserSelect","KhtmlUserSelect","unselectable","traverse","fn","len","reverse","wrapper","wrapperNode","wrapperInner","unwrap","isDoc","attach","styler","overlay","params","overlayDiv","css","top","left","width","height","zIndex","opacity","throb","timer","time","callback","throbber","class","clearTimeout","content","setTimeout","update","textNode","nodeValue","main"],"mappings":"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","file":"../skylark-domx-noder.js","sourcesContent":["define('skylark-domx-noder/noder',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\"\r\n], function(skylark, langx, browser) {\r\n    var isIE = !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g),\r\n        fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\r\n        singleTagRE = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\r\n        div = document.createElement(\"div\"),\r\n        table = document.createElement('table'),\r\n        tableBody = document.createElement('tbody'),\r\n        tableRow = document.createElement('tr'),\r\n        containers = {\r\n            'tr': tableBody,\r\n            'tbody': table,\r\n            'thead': table,\r\n            'tfoot': table,\r\n            'td': tableRow,\r\n            'th': tableRow,\r\n            '*': div\r\n        },\r\n        rootNodeRE = /^(?:body|html)$/i,\r\n        map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n\r\n    function ensureNodes(nodes, copyByClone) {\r\n        if (!langx.isArrayLike(nodes)) {\r\n            nodes = [nodes];\r\n        }\r\n        if (copyByClone) {\r\n            nodes = map.call(nodes, function(node) {\r\n                return node.cloneNode(true);\r\n            });\r\n        }\r\n        return langx.flatten(nodes);\r\n    }\r\n\r\n    function nodeName(elm, chkName) {\r\n        var name = elm.nodeName && elm.nodeName.toLowerCase();\r\n        if (chkName !== undefined) {\r\n            return name === chkName.toLowerCase();\r\n        }\r\n        return name;\r\n    };\r\n\r\n\r\n    function activeElement(doc) {\r\n        doc = doc || document;\r\n        var el;\r\n\r\n        // Support: IE 9 only\r\n        // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\r\n        try {\r\n            el = doc.activeElement;\r\n        } catch ( error ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 9 - 11 only\r\n        // IE may return null instead of an element\r\n        // Interestingly, this only seems to occur when NOT in an iframe\r\n        if ( !el ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 11 only\r\n        // IE11 returns a seemingly empty object in some cases when accessing\r\n        // document.activeElement from an <iframe>\r\n        if ( !el.nodeName ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        return el;\r\n    };\r\n\r\n    function enhancePlaceContent(placing,node) {\r\n        if (langx.isFunction(placing)) {\r\n            return placing.apply(node,[]);\r\n        }\r\n        if (langx.isArrayLike(placing)) {\r\n            var neddsFlattern;\r\n            for (var i=0;i<placing.length;i++) {\r\n                if (langx.isFunction(placing[i])) {\r\n                    placing[i] = placing[i].apply(node,[]);\r\n                    if (langx.isArrayLike(placing[i])) {\r\n                        neddsFlattern = true;\r\n                    }\r\n                }\r\n            }\r\n            if (neddsFlattern) {\r\n                placing = langx.flatten(placing);\r\n            }\r\n        }\r\n        return placing;\r\n    }\r\n    function after(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone),\r\n                refNode = refNode.nextSibling;\r\n\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                if (refNode) {\r\n                    parent.insertBefore(nodes[i], refNode);\r\n                } else {\r\n                    parent.appendChild(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function append(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var parentNode = node,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            parentNode.appendChild(nodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function before(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone);\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                parent.insertBefore(nodes[i], refNode);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /*   \r\n     * Get the children of the specified node, including text and comment nodes.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contents(elm) {\r\n        if (nodeName(elm, \"iframe\")) {\r\n            return elm.contentDocument;\r\n        }\r\n        return elm.childNodes;\r\n    }\r\n\r\n    /*   \r\n     * Create a element and set attributes on it.\r\n     * @param {HTMLElement} tag\r\n     * @param {attrs} attrs\r\n     * @param } parent\r\n     */\r\n    function createElement(tag, props,attrs, parent) {\r\n        var node;\r\n\r\n        if (/svg/i.test(tag)) {\r\n            node = document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n        } else {\r\n            node = document.createElement(tag);\r\n        }\r\n\r\n        if (langx.isHtmlNode(props)) {\r\n            parent = props;\r\n            props = null;\r\n            attrs = null;\r\n        } else if (langx.isHtmlNode(attrs)){\r\n            parent = attrs;\r\n            attrs = null;\r\n        }\r\n\r\n        if (props) {\r\n            for (var name in props) {\r\n                node[name] = props[name];\r\n            }\r\n        }\r\n\r\n        if (attrs) {\r\n            for (var name in attrs) {\r\n                node.setAttribute(name, attrs[name]);\r\n            }\r\n        }\r\n        if (parent) {\r\n            append(parent, node);\r\n        }\r\n        return node;\r\n    }\r\n\r\nfunction removeSelfClosingTags(xml) {\r\n    var split = xml.split(\"/>\");\r\n    var newXml = \"\";\r\n    for (var i = 0; i < split.length - 1;i++) {\r\n        var edsplit = split[i].split(\"<\");\r\n        newXml += split[i] + \"></\" + edsplit[edsplit.length - 1].split(\" \")[0] + \">\";\r\n    }\r\n    return newXml + split[split.length-1];\r\n}\r\n\r\n    /*   \r\n     * Create a DocumentFragment from the HTML fragment.\r\n     * @param {String} html\r\n     */\r\n    function createFragment(html) {\r\n        // A special case optimization for a single tag\r\n        html = langx.trim(html);\r\n        if (singleTagRE.test(html)) {\r\n            return [createElement(RegExp.$1)];\r\n        }\r\n\r\n        var name = fragmentRE.test(html) && RegExp.$1\r\n        if (!(name in containers)) {\r\n            name = \"*\"\r\n        }\r\n        var container = containers[name];\r\n        container.innerHTML = removeSelfClosingTags(\"\" + html);\r\n        dom = slice.call(container.childNodes);\r\n\r\n        dom.forEach(function(node) {\r\n            container.removeChild(node);\r\n        })\r\n\r\n        return dom;\r\n    }\r\n\r\n    /*   \r\n     * Create a deep copy of the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {Boolean} deep\r\n     */\r\n    function clone(node, deep) {\r\n        var self = this,\r\n            clone;\r\n\r\n        // TODO: Add feature detection here in the future\r\n        if (!isIE || node.nodeType !== 1 || deep) {\r\n            return node.cloneNode(deep);\r\n        }\r\n\r\n        // Make a HTML5 safe shallow copy\r\n        if (!deep) {\r\n            clone = document.createElement(node.nodeName);\r\n\r\n            // Copy attribs\r\n            each(self.getAttribs(node), function(attr) {\r\n                self.setAttrib(clone, attr.nodeName, self.getAttrib(node, attr.nodeName));\r\n            });\r\n\r\n            return clone;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node .\r\n     * @param {String} node\r\n     * @param {Node} child\r\n     */\r\n    function contains(node, child) {\r\n        return isChildOf(child, node);\r\n    }\r\n\r\n    /*   \r\n     * Create a new Text node.\r\n     * @param {String} text\r\n     * @param {Node} child\r\n     */\r\n    function createTextNode(text) {\r\n        return document.createTextNode(text);\r\n    }\r\n\r\n    /*   \r\n     * Get the current document object.\r\n     */\r\n    function doc() {\r\n        return document;\r\n    }\r\n\r\n    /*   \r\n     * Remove all child nodes of the set of matched elements from the DOM.\r\n     * @param {Object} node\r\n     */\r\n    function empty(node) {\r\n        while (node.hasChildNodes()) {\r\n            var child = node.firstChild;\r\n            node.removeChild(child);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    var fulledEl = null;\r\n\r\n    function fullScreen(el) {\r\n        if (el === false) {\r\n            browser.exitFullScreen.apply(document);\r\n        } else if (el) {\r\n            browser.requestFullScreen.apply(el);\r\n            fulledEl = el;\r\n        } else {\r\n            return (\r\n                document.fullscreenElement ||\r\n                document.webkitFullscreenElement ||\r\n                document.mozFullScreenElement ||\r\n                document.msFullscreenElement\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    // Selectors\r\n    function focusable( element, hasTabindex ) {\r\n        var map, mapName, img, focusableIfVisible, fieldset,\r\n            nodeName = element.nodeName.toLowerCase();\r\n\r\n        if ( \"area\" === nodeName ) {\r\n            map = element.parentNode;\r\n            mapName = map.name;\r\n            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== \"map\" ) {\r\n                return false;\r\n            }\r\n            img = $( \"img[usemap='#\" + mapName + \"']\" );\r\n            return img.length > 0 && img.is( \":visible\" );\r\n        }\r\n\r\n        if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {\r\n            focusableIfVisible = !element.disabled;\r\n\r\n            if ( focusableIfVisible ) {\r\n\r\n                // Form controls within a disabled fieldset are disabled.\r\n                // However, controls within the fieldset's legend do not get disabled.\r\n                // Since controls generally aren't placed inside legends, we skip\r\n                // this portion of the check.\r\n                fieldset = $( element ).closest( \"fieldset\" )[ 0 ];\r\n                if ( fieldset ) {\r\n                    focusableIfVisible = !fieldset.disabled;\r\n                }\r\n            }\r\n        } else if ( \"a\" === nodeName ) {\r\n            focusableIfVisible = element.href || hasTabindex;\r\n        } else {\r\n            focusableIfVisible = hasTabindex;\r\n        }\r\n\r\n        return focusableIfVisible && $( element ).is( \":visible\" ) && visible( $( element ) );\r\n    };\r\n\r\n    function fromPoint(x,y) {\r\n        return document.elementFromPoint(x,y);\r\n    }\r\n\r\n    /**\r\n     * Generate id\r\n     * @param   {HTMLElement} el\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    function generateId(el) {\r\n        var str = el.tagName + el.className + el.src + el.href + el.textContent,\r\n            i = str.length,\r\n            sum = 0;\r\n\r\n        while (i--) {\r\n            sum += str.charCodeAt(i);\r\n        }\r\n\r\n        return sum.toString(36);\r\n    }\r\n\r\n\r\n   var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi;\r\n \r\n    /*   \r\n     * Get the HTML contents of the first element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} html\r\n     */\r\n    function html(node, html) {\r\n        if (html === undefined) {\r\n            return node.innerHTML;\r\n        } else {\r\n            this.empty(node);\r\n            html = html || \"\";\r\n            if (langx.isString(html)) {\r\n                html = html.replace( rxhtmlTag, \"<$1></$2>\" );\r\n            }\r\n            if (langx.isString(html) || langx.isNumber(html)) {               \r\n                node.innerHTML = html;\r\n            } else if (langx.isArrayLike(html)) {\r\n                for (var i = 0; i < html.length; i++) {\r\n                    node.appendChild(html[i]);\r\n                }\r\n            } else {\r\n                node.appendChild(html);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node.\r\n     * @param {Node} node\r\n     * @param {Node} parent\r\n     * @param {Node} directly\r\n     */\r\n    function isChildOf(node, parent, directly) {\r\n        if (directly) {\r\n            return node.parentNode === parent;\r\n        }\r\n        if (document.documentElement.contains) {\r\n            return parent.contains(node);\r\n        }\r\n        while (node) {\r\n            if (parent === node) {\r\n                return true;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a document.\r\n     * @param {Node} node\r\n     */\r\n    function isDocument(node) {\r\n        return node != null && node.nodeType == node.DOCUMENT_NODE\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is in the document\r\n     * @param {Node} node\r\n     */\r\n    function isInDocument(node) {\r\n      return (node === document.body) ? true : document.body.contains(node);\r\n    }        \r\n\r\n    var blockNodes = [\"div\", \"p\", \"ul\", \"ol\", \"li\", \"blockquote\", \"hr\", \"pre\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"table\"];\r\n\r\n    function isBlockNode(node) {\r\n        if (!node || node.nodeType === 3) {\r\n          return false;\r\n        }\r\n        return new RegExp(\"^(\" + (blockNodes.join('|')) + \")$\").test(node.nodeName.toLowerCase());\r\n    }\r\n\r\n    function isActive (elem) {\r\n            return elem === document.activeElement && (elem.type || elem.href);\r\n    }\r\n\r\n\r\n    function isTextNode(node) {\r\n        return node && node.nodeType === 3;\r\n    }\r\n\r\n\r\n    function isElement(node) {\r\n        return node && node.nodeType === 1;\r\n    }\r\n\r\n    function isInFrame() {\r\n        try {\r\n            return window.parent !== window.self;\r\n        } catch (x) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Get the owner document object for the specified element.\r\n     * @param {Node} elm\r\n     */\r\n    function ownerDoc(elm) {\r\n        if (!elm) {\r\n            return document;\r\n        }\r\n\r\n        if (elm.nodeType == 9) {\r\n            return elm;\r\n        }\r\n\r\n        return elm.ownerDocument;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function ownerWindow(elm) {\r\n        var doc = ownerDoc(elm);\r\n        return doc.defaultView || doc.parentWindow;\r\n    }\r\n\r\n    /*   \r\n     * insert one or more nodes as the first children of the specified node.\r\n     * @param {Node} node\r\n     * @param {Node or ArrayLike} placing\r\n     * @param {Boolean Optional} copyByClone\r\n     */\r\n    function prepend(node, placing, copyByClone) {\r\n        var parentNode = node,\r\n            refNode = parentNode.firstChild,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (refNode) {\r\n                parentNode.insertBefore(nodes[i], refNode);\r\n            } else {\r\n                parentNode.appendChild(nodes[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function offsetParent(elm) {\r\n        var parent = elm.offsetParent || document.body;\r\n        while (parent && !rootNodeRE.test(parent.nodeName) && document.defaultView.getComputedStyle(parent).position == \"static\") {\r\n            parent = parent.offsetParent;\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /*   \r\n     * Remove the set of matched elements from the DOM.\r\n     * @param {Node} node\r\n     */\r\n    function remove(node) {\r\n        if (node && node.parentNode) {\r\n            try {\r\n                node.parentNode.removeChild(node);\r\n            } catch (e) {\r\n                console.warn(\"The node is already removed\", e);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function removeChild(node,children) {\r\n        if (!langx.isArrayLike(children)) {\r\n            children = [children];\r\n        }\r\n        for (var i=0;i<children.length;i++) {\r\n            node.removeChild(children[i]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function scrollParent( elm, includeHidden ) {\r\n        var position = document.defaultView.getComputedStyle(elm).position,\r\n            excludeStaticParent = position === \"absolute\",\r\n            overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n            scrollParent = this.parents().filter( function() {\r\n                var parent = $( this );\r\n                if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                    return false;\r\n                }\r\n                return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                    parent.css( \"overflow-x\" ) );\r\n            } ).eq( 0 );\r\n\r\n        return position === \"fixed\" || !scrollParent.length ?\r\n            $( this[ 0 ].ownerDocument || document ) :\r\n            scrollParent;\r\n    };\r\n\r\n\r\n    function reflow(elm) {\r\n        if (el == null) {\r\n          elm = document;\r\n        }\r\n        elm.offsetHeight;\r\n\r\n        return this;      \r\n    }\r\n\r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {Node} node\r\n     * @param {Node} oldNode\r\n     */\r\n    function replace(node, oldNode) {\r\n        oldNode.parentNode.replaceChild(node, oldNode);\r\n        return this;\r\n    }\r\n\r\n\r\n    function selectable(elem, selectable) {\r\n        if (elem === undefined || elem.style === undefined)\r\n            return;\r\n        elem.onselectstart = selectable ? function () {\r\n            return false;\r\n        } : function () {\r\n        };\r\n        elem.style.MozUserSelect = selectable ? 'auto' : 'none';\r\n        elem.style.KhtmlUserSelect = selectable ? 'auto' : 'none';\r\n        elem.unselectable = selectable ? 'on' : 'off';\r\n    }\r\n\r\n    /*   \r\n     * traverse the specified node and its descendants, perform the callback function on each\r\n     * @param {Node} node\r\n     * @param {Function} fn\r\n     */\r\n    function traverse(node, fn) {\r\n        fn(node)\r\n        for (var i = 0, len = node.childNodes.length; i < len; i++) {\r\n            traverse(node.childNodes[i], fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} node\r\n     */\r\n    function reverse(node) {\r\n        var firstChild = node.firstChild;\r\n        for (var i = node.children.length - 1; i > 0; i--) {\r\n            if (i > 0) {\r\n                var child = node.children[i];\r\n                node.insertBefore(child, firstChild);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around each element in the set of matched elements.\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapper(node, wrapperNode) {\r\n        if (langx.isString(wrapperNode)) {\r\n            wrapperNode = this.createFragment(wrapperNode).firstChild;\r\n        }\r\n        node.parentNode.insertBefore(wrapperNode, node);\r\n        wrapperNode.appendChild(node);\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around the content of each element in the set of matched\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapperInner(node, wrapperNode) {\r\n        var childNodes = slice.call(node.childNodes);\r\n        node.appendChild(wrapperNode);\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            wrapperNode.appendChild(childNodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Remove the parents of the set of matched elements from the DOM, leaving the matched\r\n     * @param {Node} node\r\n     */\r\n    function unwrap(node) {\r\n        var child, parent = node.parentNode;\r\n        if (parent) {\r\n            if (this.isDoc(parent.parentNode)) return;\r\n            parent.parentNode.insertBefore(node, parent);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function isInput (el) { \r\n        return el.tagName === 'INPUT' || \r\n               el.tagName === 'TEXTAREA' || \r\n               el.tagName === 'SELECT' || \r\n               isEditable(el); \r\n    }\r\n    \r\n    function isEditable (el) {\r\n      if (!el) { return false; } // no parents were editable\r\n      if (el.contentEditable === 'false') { return false; } // stop the lookup\r\n      if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain\r\n      return isEditable(el.parentNode); // contentEditable is set to 'inherit'\r\n    }\r\n\r\n    function noder() {\r\n        return noder;\r\n    }\r\n\r\n    langx.mixin(noder, {\r\n        active  : activeElement,\r\n\r\n        after: after,\r\n\r\n        append: append,\r\n\r\n        before: before,\r\n\r\n        blur : function(el) {\r\n            el.blur();\r\n        },\r\n\r\n        body: function() {\r\n            return document.body;\r\n        },\r\n\r\n        clone: clone,\r\n\r\n        contains: contains,\r\n\r\n        contents: contents,\r\n\r\n        createElement: createElement,\r\n\r\n        createFragment: createFragment,\r\n\r\n        createTextNode: createTextNode,\r\n\r\n        doc: doc,\r\n\r\n        empty: empty,\r\n\r\n        generateId,\r\n\r\n        fullScreen: fullScreen,\r\n\r\n        focusable: focusable,\r\n\r\n        fromPoint,\r\n\r\n        html: html,\r\n\r\n        isActive,\r\n\r\n        isChildOf,\r\n\r\n        isDocument,\r\n\r\n        isEditable,\r\n        \r\n        isElement,\r\n\r\n        isInDocument,\r\n\r\n        isInFrame,\r\n\r\n        isInput,\r\n\r\n        isTextNode,\r\n\r\n        isWindow: langx.isWindow,\r\n\r\n        nodeName : nodeName,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        ownerDoc: ownerDoc,\r\n\r\n        ownerWindow: ownerWindow,\r\n\r\n        prepend: prepend,\r\n\r\n        reflow: reflow,\r\n\r\n        remove: remove,\r\n\r\n        removeChild : removeChild,\r\n\r\n        replace: replace,\r\n\r\n        selectable,\r\n\r\n        traverse: traverse,\r\n\r\n        reverse: reverse,\r\n\r\n        wrapper: wrapper,\r\n\r\n        wrapperInner: wrapperInner,\r\n\r\n        unwrap: unwrap\r\n    });\r\n\r\n    return skylark.attach(\"domx.noder\" , noder);\r\n});\ndefine('skylark-domx-noder/overlay',[\r\n\t\"skylark-domx-styler\",\r\n\t\"./noder\"\r\n],function(styler,noder){\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     * @param {Node} params\r\n     */\r\n    function overlay(elm, params) {\r\n        var overlayDiv = noder.createElement(\"div\", params);\r\n        styler.css(overlayDiv, {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            zIndex: 0x7FFFFFFF,\r\n            opacity: 0.7\r\n        });\r\n        elm.appendChild(overlayDiv);\r\n        return overlayDiv;\r\n\r\n    }\r\n\r\n    return noder.overlay = overlay;\r\n });\ndefine('skylark-domx-noder/throb',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./noder\"\r\n],function(langx,styler,noder) {\r\n\r\n    \r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {HTMLElement} elm\r\n     * @param {Node} params\r\n     */\r\n    function throb(elm, params) {\r\n        params = params || {};\r\n\r\n        var self = this,\r\n            text = params.text,\r\n            style = params.style,\r\n            time = params.time,\r\n            callback = params.callback,\r\n            timer,\r\n\r\n            throbber = noder.createElement(\"div\", {\r\n                \"class\": params.className || \"throbber\"\r\n            }),\r\n            //_overlay = overlay(throbber, {\r\n            //    \"class\": 'overlay fade'\r\n            //}),\r\n            remove = function() {\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                    timer = null;\r\n                }\r\n                if (throbber) {\r\n                    noder.remove(throbber);\r\n                    throbber = null;\r\n                }\r\n            },\r\n            update = function(params) {\r\n                if (params && params.text && throbber) {\r\n                    textNode.nodeValue = params.text;\r\n                }\r\n            };\r\n\r\n        if (params.style) {\r\n            styler.css(throbber,params.style);\r\n        }\r\n\r\n        //throb = noder.createElement(\"div\", {\r\n        //   \"class\": params.throb && params.throb.className || \"throb\"\r\n        //}),\r\n        //textNode = noder.createTextNode(text || \"\"),\r\n \r\n        var content = params.content ||  '<span class=\"throb\"></span>';\r\n\r\n        //throb.appendChild(textNode);\r\n        //throbber.appendChild(throb);\r\n\r\n        noder.html(throbber,content);\r\n        \r\n        elm.appendChild(throbber);\r\n\r\n        var end = function() {\r\n            remove();\r\n            if (callback) callback();\r\n        };\r\n        if (time) {\r\n            timer = setTimeout(end, time);\r\n        }\r\n\r\n        return {\r\n            throbber : throbber,\r\n            remove: remove,\r\n            update: update\r\n        };\r\n    }\r\n\r\n    return noder.throb = throb;\r\n});\ndefine('skylark-domx-noder/main',[\r\n\t\"./noder\",\r\n\t\"./overlay\",\r\n\t\"./throb\"\r\n],function(noder){\r\n\treturn noder;\r\n});\ndefine('skylark-domx-noder', ['skylark-domx-noder/main'], function (main) { return main; });\n\n"]}