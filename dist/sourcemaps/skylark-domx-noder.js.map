{"version":3,"sources":["skylark-domx-noder.js"],"names":["define","skylark","langx","browser","isIE","navigator","userAgent","match","fragmentRE","singleTagRE","div","document","createElement","table","tableBody","tableRow","containers","tr","tbody","thead","tfoot","td","th","*","rootNodeRE","map","Array","prototype","slice","ensureNodes","content","copyByClone","nodes","call","isArrayLike","value","isElement","isTextNode","test","createTextNode","filter","normalizeContent","node","cloneNode","flatten","nodeName","elm","chkName","name","toLowerCase","undefined","enhancePlaceContent","placing","isFunction","apply","neddsFlattern","i","length","append","parentNode","appendChild","this","tag","props","attrs","parent","createElementNS","isHtmlNode","setAttribute","fullscreen","el","exitFullscreen","support","requestFullscreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rxhtmlTag","isChildOf","directly","documentElement","contains","nodeType","ownerDoc","ownerDocument","isEditable","contentEditable","noder","mixin","active","doc","activeElement","error","body","after","refNode","nextSibling","insertBefore","before","blur","clone","deep","self","each","getAttribs","attr","setAttrib","getAttrib","child","contents","contentDocument","childNodes","createFragment","html","trim","RegExp","$1","container","innerHTML","xml","split","newXml","edsplit","removeSelfClosingTags","dom","forEach","removeChild","text","empty","hasChildNodes","firstChild","generateId","str","tagName","className","src","href","textContent","sum","charCodeAt","toString","focusable","element","hasTabindex","mapName","img","focusableIfVisible","fieldset","$","is","disabled","closest","visible","fromPoint","x","y","elementFromPoint","isString","replace","isNumber","isActive","elem","type","isDocument","DOCUMENT_NODE","isFullscreen","isInDocument","isInFrame","window","isInput","isWindow","offsetParent","defaultView","getComputedStyle","position","ownerWindow","parentWindow","prepend","reflow","offsetHeight","remove","e","console","warn","children","oldNode","replaceChild","selectable","style","onselectstart","MozUserSelect","KhtmlUserSelect","unselectable","traverse","fn","len","reverse","wrapper","wrapperNode","wrapperInner","unwrap","isDoc","attach","styler","overlay","params","overlayDiv","css","top","left","width","height","zIndex","opacity","throb","timer","time","callback","throbber","clearTimeout","setTimeout","update","textNode","nodeValue","main"],"mappings":"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","file":"../skylark-domx-noder.js","sourcesContent":["define('skylark-domx-noder/noder',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\"\r\n], function(skylark, langx, browser) {\r\n    var isIE = !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g),\r\n        fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\r\n        singleTagRE = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\r\n        div = document.createElement(\"div\"),\r\n        table = document.createElement('table'),\r\n        tableBody = document.createElement('tbody'),\r\n        tableRow = document.createElement('tr'),\r\n        containers = {\r\n            'tr': tableBody,\r\n            'tbody': table,\r\n            'thead': table,\r\n            'tfoot': table,\r\n            'td': tableRow,\r\n            'th': tableRow,\r\n            '*': div\r\n        },\r\n        rootNodeRE = /^(?:body|html)$/i,\r\n        map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n\r\n\r\n\r\n    function normalizeContent(content) {\r\n        if (typeof content === 'function') {\r\n            content = content();\r\n        }\r\n        return map.call(langx.isArrayLike(content) ? content : [content],value => {\r\n            if (typeof value === 'function') {\r\n                value = value();\r\n            }\r\n            if (isElement(value) || isTextNode(value)) {\r\n                return value;\r\n            }\r\n            if (typeof value === 'string' && /\\S/.test(value)) {\r\n                return document.createTextNode(value);\r\n            }\r\n        }).filter(value => value);\r\n    }\r\n\r\n    function ensureNodes(content, copyByClone) {\r\n        var nodes = normalizeContent(content);\r\n\r\n\r\n        //if (!langx.isArrayLike(nodes)) {\r\n        //    nodes = [nodes];\r\n        //}\r\n        if (copyByClone) {\r\n            nodes = map.call(nodes, function(node) {\r\n                return node.cloneNode(true);\r\n            });\r\n        }\r\n        return langx.flatten(nodes);\r\n    }\r\n\r\n    function nodeName(elm, chkName) {\r\n        var name = elm.nodeName && elm.nodeName.toLowerCase();\r\n        if (chkName !== undefined) {\r\n            return name === chkName.toLowerCase();\r\n        }\r\n        return name;\r\n    };\r\n\r\n\r\n    function activeElement(doc) {\r\n        doc = doc || document;\r\n        var el;\r\n\r\n        // Support: IE 9 only\r\n        // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\r\n        try {\r\n            el = doc.activeElement;\r\n        } catch ( error ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 9 - 11 only\r\n        // IE may return null instead of an element\r\n        // Interestingly, this only seems to occur when NOT in an iframe\r\n        if ( !el ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 11 only\r\n        // IE11 returns a seemingly empty object in some cases when accessing\r\n        // document.activeElement from an <iframe>\r\n        if ( !el.nodeName ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        return el;\r\n    };\r\n\r\n    function enhancePlaceContent(placing,node) {\r\n        if (langx.isFunction(placing)) {\r\n            return placing.apply(node,[]);\r\n        }\r\n        if (langx.isArrayLike(placing)) {\r\n            var neddsFlattern;\r\n            for (var i=0;i<placing.length;i++) {\r\n                if (langx.isFunction(placing[i])) {\r\n                    placing[i] = placing[i].apply(node,[]);\r\n                    if (langx.isArrayLike(placing[i])) {\r\n                        neddsFlattern = true;\r\n                    }\r\n                }\r\n            }\r\n            if (neddsFlattern) {\r\n                placing = langx.flatten(placing);\r\n            }\r\n        }\r\n        return placing;\r\n    }\r\n    function after(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone),\r\n                refNode = refNode.nextSibling;\r\n\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                if (refNode) {\r\n                    parent.insertBefore(nodes[i], refNode);\r\n                } else {\r\n                    parent.appendChild(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function append(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var parentNode = node,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            parentNode.appendChild(nodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function before(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone);\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                parent.insertBefore(nodes[i], refNode);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /*   \r\n     * Get the children of the specified node, including text and comment nodes.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contents(elm) {\r\n        if (nodeName(elm, \"iframe\")) {\r\n            return elm.contentDocument;\r\n        }\r\n        return elm.childNodes;\r\n    }\r\n\r\n    /*   \r\n     * Create a element and set attributes on it.\r\n     * @param {HTMLElement} tag\r\n     * @param {attrs} attrs\r\n     * @param } parent\r\n     */\r\n    function createElement(tag, props,attrs, parent) {\r\n        var node;\r\n\r\n        if (/svg/i.test(tag)) {\r\n            node = document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\r\n        } else {\r\n            node = document.createElement(tag);\r\n        }\r\n\r\n        if (langx.isHtmlNode(props)) {\r\n            parent = props;\r\n            props = null;\r\n            attrs = null;\r\n        } else if (langx.isHtmlNode(attrs)){\r\n            parent = attrs;\r\n            attrs = null;\r\n        }\r\n\r\n        if (props) {\r\n            for (var name in props) {\r\n                node[name] = props[name];\r\n            }\r\n        }\r\n\r\n        if (attrs) {\r\n            for (var name in attrs) {\r\n                node.setAttribute(name, attrs[name]);\r\n            }\r\n        }\r\n        if (parent) {\r\n            append(parent, node);\r\n        }\r\n        return node;\r\n    }\r\n\r\nfunction removeSelfClosingTags(xml) {\r\n    var split = xml.split(\"/>\");\r\n    var newXml = \"\";\r\n    for (var i = 0; i < split.length - 1;i++) {\r\n        var edsplit = split[i].split(\"<\");\r\n        newXml += split[i] + \"></\" + edsplit[edsplit.length - 1].split(\" \")[0] + \">\";\r\n    }\r\n    return newXml + split[split.length-1];\r\n}\r\n\r\n    /*   \r\n     * Create a DocumentFragment from the HTML fragment.\r\n     * @param {String} html\r\n     */\r\n    function createFragment(html) {\r\n        // A special case optimization for a single tag\r\n        html = langx.trim(html);\r\n        if (singleTagRE.test(html)) {\r\n            return [createElement(RegExp.$1)];\r\n        }\r\n\r\n        var name = fragmentRE.test(html) && RegExp.$1\r\n        if (!(name in containers)) {\r\n            name = \"*\"\r\n        }\r\n        var container = containers[name];\r\n        container.innerHTML = removeSelfClosingTags(\"\" + html);\r\n        dom = slice.call(container.childNodes);\r\n\r\n        dom.forEach(function(node) {\r\n            container.removeChild(node);\r\n        })\r\n\r\n        return dom;\r\n    }\r\n\r\n    /*   \r\n     * Create a deep copy of the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {Boolean} deep\r\n     */\r\n    function clone(node, deep) {\r\n        var self = this,\r\n            clone;\r\n\r\n        // TODO: Add feature detection here in the future\r\n        if (!isIE || node.nodeType !== 1 || deep) {\r\n            return node.cloneNode(deep);\r\n        }\r\n\r\n        // Make a HTML5 safe shallow copy\r\n        if (!deep) {\r\n            clone = document.createElement(node.nodeName);\r\n\r\n            // Copy attribs\r\n            each(self.getAttribs(node), function(attr) {\r\n                self.setAttrib(clone, attr.nodeName, self.getAttrib(node, attr.nodeName));\r\n            });\r\n\r\n            return clone;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node .\r\n     * @param {String} node\r\n     * @param {Node} child\r\n     */\r\n    function contains(node, child) {\r\n        return isChildOf(child, node);\r\n    }\r\n\r\n    /*   \r\n     * Create a new Text node.\r\n     * @param {String} text\r\n     * @param {Node} child\r\n     */\r\n    function createTextNode(text) {\r\n        return document.createTextNode(text);\r\n    }\r\n\r\n    /*   \r\n     * Get the current document object.\r\n     */\r\n    function doc() {\r\n        return document;\r\n    }\r\n\r\n    /*   \r\n     * Remove all child nodes of the set of matched elements from the DOM.\r\n     * @param {Object} node\r\n     */\r\n    function empty(node) {\r\n        while (node.hasChildNodes()) {\r\n            var child = node.firstChild;\r\n            node.removeChild(child);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    var fulledEl = null;\r\n\r\n    function fullscreen(el) {\r\n        if (el === false) {\r\n            return browser.exitFullscreen.apply(document);\r\n        } else if (el) {\r\n            return el[browser.support.fullscreen.requestFullscreen]();\r\n            fulledEl = el;\r\n        } else {\r\n            return (\r\n                document.fullscreenElement ||\r\n                document.webkitFullscreenElement ||\r\n                document.mozFullScreenElement ||\r\n                document.msFullscreenElement\r\n            )\r\n        }\r\n    }\r\n\r\n    function isFullscreen(el) {\r\n        return fullscreen() === el;\r\n    }\r\n\r\n\r\n    // Selectors\r\n    function focusable( element, hasTabindex ) {\r\n        var map, mapName, img, focusableIfVisible, fieldset,\r\n            nodeName = element.nodeName.toLowerCase();\r\n\r\n        if ( \"area\" === nodeName ) {\r\n            map = element.parentNode;\r\n            mapName = map.name;\r\n            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== \"map\" ) {\r\n                return false;\r\n            }\r\n            img = $( \"img[usemap='#\" + mapName + \"']\" );\r\n            return img.length > 0 && img.is( \":visible\" );\r\n        }\r\n\r\n        if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {\r\n            focusableIfVisible = !element.disabled;\r\n\r\n            if ( focusableIfVisible ) {\r\n\r\n                // Form controls within a disabled fieldset are disabled.\r\n                // However, controls within the fieldset's legend do not get disabled.\r\n                // Since controls generally aren't placed inside legends, we skip\r\n                // this portion of the check.\r\n                fieldset = $( element ).closest( \"fieldset\" )[ 0 ];\r\n                if ( fieldset ) {\r\n                    focusableIfVisible = !fieldset.disabled;\r\n                }\r\n            }\r\n        } else if ( \"a\" === nodeName ) {\r\n            focusableIfVisible = element.href || hasTabindex;\r\n        } else {\r\n            focusableIfVisible = hasTabindex;\r\n        }\r\n\r\n        return focusableIfVisible && $( element ).is( \":visible\" ) && visible( $( element ) );\r\n    };\r\n\r\n    function fromPoint(x,y) {\r\n        return document.elementFromPoint(x,y);\r\n    }\r\n\r\n    /**\r\n     * Generate id\r\n     * @param   {HTMLElement} el\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    function generateId(el) {\r\n        var str = el.tagName + el.className + el.src + el.href + el.textContent,\r\n            i = str.length,\r\n            sum = 0;\r\n\r\n        while (i--) {\r\n            sum += str.charCodeAt(i);\r\n        }\r\n\r\n        return sum.toString(36);\r\n    }\r\n\r\n\r\n   var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi;\r\n \r\n    /*   \r\n     * Get the HTML contents of the first element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} html\r\n     */\r\n    function html(node, html) {\r\n        if (html === undefined) {\r\n            return node.innerHTML;\r\n        } else {\r\n            this.empty(node);\r\n            html = html || \"\";\r\n            if (langx.isString(html)) {\r\n                html = html.replace( rxhtmlTag, \"<$1></$2>\" );\r\n            }\r\n            if (langx.isString(html) || langx.isNumber(html)) {               \r\n                node.innerHTML = html;\r\n            } else if (langx.isArrayLike(html)) {\r\n                for (var i = 0; i < html.length; i++) {\r\n                    node.appendChild(html[i]);\r\n                }\r\n            } else {\r\n                node.appendChild(html);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node.\r\n     * @param {Node} node\r\n     * @param {Node} parent\r\n     * @param {Node} directly\r\n     */\r\n    function isChildOf(node, parent, directly) {\r\n        if (directly) {\r\n            return node.parentNode === parent;\r\n        }\r\n        if (document.documentElement.contains) {\r\n            return parent.contains(node);\r\n        }\r\n        while (node) {\r\n            if (parent === node) {\r\n                return true;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a document.\r\n     * @param {Node} node\r\n     */\r\n    function isDocument(node) {\r\n        return node != null && node.nodeType == node.DOCUMENT_NODE\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is in the document\r\n     * @param {Node} node\r\n     */\r\n    function isInDocument(node) {\r\n      return (node === document.body) ? true : document.body.contains(node);\r\n    }        \r\n\r\n    var blockNodes = [\"div\", \"p\", \"ul\", \"ol\", \"li\", \"blockquote\", \"hr\", \"pre\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"table\"];\r\n\r\n    function isBlockNode(node) {\r\n        if (!node || node.nodeType === 3) {\r\n          return false;\r\n        }\r\n        return new RegExp(\"^(\" + (blockNodes.join('|')) + \")$\").test(node.nodeName.toLowerCase());\r\n    }\r\n\r\n    function isActive (elem) {\r\n            return elem === document.activeElement && (elem.type || elem.href);\r\n    }\r\n\r\n\r\n    function isTextNode(node) {\r\n        return node && node.nodeType === 3;\r\n    }\r\n\r\n\r\n    function isElement(node) {\r\n        return node && node.nodeType === 1;\r\n    }\r\n\r\n    function isInFrame() {\r\n        try {\r\n            return window.parent !== window.self;\r\n        } catch (x) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Get the owner document object for the specified element.\r\n     * @param {Node} elm\r\n     */\r\n    function ownerDoc(elm) {\r\n        if (!elm) {\r\n            return document;\r\n        }\r\n\r\n        if (elm.nodeType == 9) {\r\n            return elm;\r\n        }\r\n\r\n        return elm.ownerDocument;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function ownerWindow(elm) {\r\n        var doc = ownerDoc(elm);\r\n        return doc.defaultView || doc.parentWindow;\r\n    }\r\n\r\n    /*   \r\n     * insert one or more nodes as the first children of the specified node.\r\n     * @param {Node} node\r\n     * @param {Node or ArrayLike} placing\r\n     * @param {Boolean Optional} copyByClone\r\n     */\r\n    function prepend(node, placing, copyByClone) {\r\n        var parentNode = node,\r\n            refNode = parentNode.firstChild,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (refNode) {\r\n                parentNode.insertBefore(nodes[i], refNode);\r\n            } else {\r\n                parentNode.appendChild(nodes[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function offsetParent(elm) {\r\n        var parent = elm.offsetParent || document.body;\r\n        while (parent && !rootNodeRE.test(parent.nodeName) && document.defaultView.getComputedStyle(parent).position == \"static\") {\r\n            parent = parent.offsetParent;\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /*   \r\n     * Remove the set of matched elements from the DOM.\r\n     * @param {Node} node\r\n     */\r\n    function remove(node) {\r\n        if (node && node.parentNode) {\r\n            try {\r\n                node.parentNode.removeChild(node);\r\n            } catch (e) {\r\n                console.warn(\"The node is already removed\", e);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function removeChild(node,children) {\r\n        if (!langx.isArrayLike(children)) {\r\n            children = [children];\r\n        }\r\n        for (var i=0;i<children.length;i++) {\r\n            node.removeChild(children[i]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function scrollParent( elm, includeHidden ) {\r\n        var position = document.defaultView.getComputedStyle(elm).position,\r\n            excludeStaticParent = position === \"absolute\",\r\n            overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n            scrollParent = this.parents().filter( function() {\r\n                var parent = $( this );\r\n                if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                    return false;\r\n                }\r\n                return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                    parent.css( \"overflow-x\" ) );\r\n            } ).eq( 0 );\r\n\r\n        return position === \"fixed\" || !scrollParent.length ?\r\n            $( this[ 0 ].ownerDocument || document ) :\r\n            scrollParent;\r\n    };\r\n\r\n\r\n    function reflow(elm) {\r\n        if (el == null) {\r\n          elm = document;\r\n        }\r\n        elm.offsetHeight;\r\n\r\n        return this;      \r\n    }\r\n\r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {Node} node\r\n     * @param {Node} oldNode\r\n     */\r\n    function replace(node, oldNode) {\r\n        oldNode.parentNode.replaceChild(node, oldNode);\r\n        return this;\r\n    }\r\n\r\n\r\n    function selectable(elem, selectable) {\r\n        if (elem === undefined || elem.style === undefined)\r\n            return;\r\n        elem.onselectstart = selectable ? function () {\r\n            return false;\r\n        } : function () {\r\n        };\r\n        elem.style.MozUserSelect = selectable ? 'auto' : 'none';\r\n        elem.style.KhtmlUserSelect = selectable ? 'auto' : 'none';\r\n        elem.unselectable = selectable ? 'on' : 'off';\r\n    }\r\n\r\n    /*   \r\n     * traverse the specified node and its descendants, perform the callback function on each\r\n     * @param {Node} node\r\n     * @param {Function} fn\r\n     */\r\n    function traverse(node, fn) {\r\n        fn(node)\r\n        for (var i = 0, len = node.childNodes.length; i < len; i++) {\r\n            traverse(node.childNodes[i], fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} node\r\n     */\r\n    function reverse(node) {\r\n        var firstChild = node.firstChild;\r\n        for (var i = node.children.length - 1; i > 0; i--) {\r\n            if (i > 0) {\r\n                var child = node.children[i];\r\n                node.insertBefore(child, firstChild);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around each element in the set of matched elements.\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapper(node, wrapperNode) {\r\n        if (langx.isString(wrapperNode)) {\r\n            wrapperNode = this.createFragment(wrapperNode).firstChild;\r\n        }\r\n        node.parentNode.insertBefore(wrapperNode, node);\r\n        wrapperNode.appendChild(node);\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around the content of each element in the set of matched\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapperInner(node, wrapperNode) {\r\n        var childNodes = slice.call(node.childNodes);\r\n        node.appendChild(wrapperNode);\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            wrapperNode.appendChild(childNodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Remove the parents of the set of matched elements from the DOM, leaving the matched\r\n     * @param {Node} node\r\n     */\r\n    function unwrap(node) {\r\n        var child, parent = node.parentNode;\r\n        if (parent) {\r\n            if (this.isDoc(parent.parentNode)) return;\r\n            parent.parentNode.insertBefore(node, parent);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function isInput (el) { \r\n        return el.tagName === 'INPUT' || \r\n               el.tagName === 'TEXTAREA' || \r\n               el.tagName === 'SELECT' || \r\n               isEditable(el); \r\n    }\r\n    \r\n    function isEditable (el) {\r\n      if (!el) { return false; } // no parents were editable\r\n      if (el.contentEditable === 'false') { return false; } // stop the lookup\r\n      if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain\r\n      return isEditable(el.parentNode); // contentEditable is set to 'inherit'\r\n    }\r\n\r\n    function noder() {\r\n        return noder;\r\n    }\r\n\r\n    langx.mixin(noder, {\r\n        active  : activeElement,\r\n\r\n        after: after,\r\n\r\n        append: append,\r\n\r\n        before: before,\r\n\r\n        blur : function(el) {\r\n            el.blur();\r\n        },\r\n\r\n        body: function() {\r\n            return document.body;\r\n        },\r\n\r\n        clone: clone,\r\n\r\n        contains: contains,\r\n\r\n        contents: contents,\r\n\r\n        createElement: createElement,\r\n\r\n        createFragment: createFragment,\r\n\r\n        createTextNode: createTextNode,\r\n\r\n        doc: doc,\r\n\r\n        empty: empty,\r\n\r\n        generateId,\r\n\r\n        fullscreen: fullscreen,\r\n\r\n        focusable: focusable,\r\n\r\n        fromPoint,\r\n\r\n        html: html,\r\n\r\n        isActive,\r\n\r\n        isChildOf,\r\n\r\n        isDocument,\r\n\r\n        isEditable,\r\n        \r\n        isElement,\r\n\r\n        isFullscreen,\r\n\r\n        isInDocument,\r\n\r\n        isInFrame,\r\n\r\n        isInput,\r\n\r\n        isTextNode,\r\n\r\n        isWindow: langx.isWindow,\r\n\r\n        nodeName : nodeName,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        ownerDoc: ownerDoc,\r\n\r\n        ownerWindow: ownerWindow,\r\n\r\n        prepend: prepend,\r\n\r\n        reflow: reflow,\r\n\r\n        remove: remove,\r\n\r\n        removeChild : removeChild,\r\n\r\n        replace: replace,\r\n\r\n        selectable,\r\n\r\n        traverse: traverse,\r\n\r\n        reverse: reverse,\r\n\r\n        wrapper: wrapper,\r\n\r\n        wrapperInner: wrapperInner,\r\n\r\n        unwrap: unwrap\r\n    });\r\n\r\n    return skylark.attach(\"domx.noder\" , noder);\r\n});\ndefine('skylark-domx-noder/overlay',[\r\n\t\"skylark-domx-styler\",\r\n\t\"./noder\"\r\n],function(styler,noder){\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     * @param {Node} params\r\n     */\r\n    function overlay(elm, params) {\r\n        var overlayDiv = noder.createElement(\"div\", params);\r\n        styler.css(overlayDiv, {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            zIndex: 0x7FFFFFFF,\r\n            opacity: 0.7\r\n        });\r\n        elm.appendChild(overlayDiv);\r\n        return overlayDiv;\r\n\r\n    }\r\n\r\n    return noder.overlay = overlay;\r\n });\ndefine('skylark-domx-noder/throb',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./noder\"\r\n],function(langx,styler,noder) {\r\n\r\n    \r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {HTMLElement} elm\r\n     * @param {Node} params\r\n     */\r\n    function throb(elm, params) {\r\n        params = params || {};\r\n\r\n        var self = this,\r\n            text = params.text,\r\n            style = params.style,\r\n            time = params.time,\r\n            callback = params.callback,\r\n            timer,\r\n\r\n            throbber = noder.createElement(\"div\", {\r\n                \"className\": params.className || \"throbber\"\r\n            }),\r\n            //_overlay = overlay(throbber, {\r\n            //    \"class\": 'overlay fade'\r\n            //}),\r\n            remove = function() {\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                    timer = null;\r\n                }\r\n                if (throbber) {\r\n                    noder.remove(throbber);\r\n                    throbber = null;\r\n                }\r\n            },\r\n            update = function(params) {\r\n                if (params && params.text && throbber) {\r\n                    textNode.nodeValue = params.text;\r\n                }\r\n            };\r\n\r\n        if (params.style) {\r\n            styler.css(throbber,params.style);\r\n        }\r\n\r\n        //throb = noder.createElement(\"div\", {\r\n        //   \"class\": params.throb && params.throb.className || \"throb\"\r\n        //}),\r\n        //textNode = noder.createTextNode(text || \"\"),\r\n \r\n        var content = params.content ||  '<span class=\"throb\"></span>';\r\n\r\n        //throb.appendChild(textNode);\r\n        //throbber.appendChild(throb);\r\n\r\n        noder.html(throbber,content);\r\n        \r\n        elm.appendChild(throbber);\r\n\r\n        var end = function() {\r\n            remove();\r\n            if (callback) callback();\r\n        };\r\n        if (time) {\r\n            timer = setTimeout(end, time);\r\n        }\r\n\r\n        return {\r\n            throbber : throbber,\r\n            remove: remove,\r\n            update: update\r\n        };\r\n    }\r\n\r\n    return noder.throb = throb;\r\n});\ndefine('skylark-domx-noder/main',[\r\n\t\"./noder\",\r\n\t\"./overlay\",\r\n\t\"./throb\"\r\n],function(noder){\r\n\treturn noder;\r\n});\ndefine('skylark-domx-noder', ['skylark-domx-noder/main'], function (main) { return main; });\n\n"]}