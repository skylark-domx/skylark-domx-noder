{"version":3,"sources":["noder.js"],"names":["define","skylark","types","arrays","strings","scripter","browser","map","Array","prototype","slice","ensureNodes","content","copyByClone","nodes","call","isArrayLike","value","isElement","isTextNode","isFragment","test","document","createTextNode","filter","normalizeContent","node","cloneNode","flatten","enhancePlaceContent","placing","isFunction","apply","neddsFlattern","i","length","noder","Object","assign","after","parent","refNode","parentNode","nextSibling","insertBefore","appendChild","this","append","before","blur","el","body","generateId","str","tagName","className","src","href","textContent","sum","charCodeAt","toString","fullscreen","focusable","fromPoint","x","y","elementFromPoint","isFullscreen","prepend","firstChild","attach"],"mappings":"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","file":"../noder.js","sourcesContent":["define([\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-arrays\",\r\n    \"skylark-langx-strings\",\r\n    \"skylark-langx-scripter\",\r\n    \"skylark-domx-browser\"\r\n], function(skylark, types, arrays, strings,scripter,browser) {\r\n    var  \r\n        map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n\r\n    function normalizeContent(content) {\r\n        if (typeof content === 'function') {\r\n            content = content();\r\n        }\r\n        return map.call(types.isArrayLike(content) ? content : [content],value => {\r\n            if (typeof value === 'function') {\r\n                value = value();\r\n            }\r\n            if (isElement(value) || isTextNode(value) || isFragment(value)) {\r\n                return value;\r\n            }\r\n            if (typeof value === 'string' && /\\S/.test(value)) {\r\n                return document.createTextNode(value);\r\n            }\r\n        }).filter(value => value);\r\n    }\r\n\r\n    function ensureNodes(content, copyByClone) {\r\n        var nodes = normalizeContent(content);\r\n\r\n\r\n        //if (!types.isArrayLike(nodes)) {\r\n        //    nodes = [nodes];\r\n        //}\r\n        if (copyByClone) {\r\n            nodes = map.call(nodes, function(node) {\r\n                return node.cloneNode(true);\r\n            });\r\n        }\r\n        return arrays.flatten(nodes);\r\n    }\r\n\r\n    function enhancePlaceContent(placing,node) {\r\n        if (types.isFunction(placing)) {\r\n            return placing.apply(node,[]);\r\n        }\r\n        if (types.isArrayLike(placing)) {\r\n            var neddsFlattern;\r\n            for (var i=0;i<placing.length;i++) {\r\n                if (types.isFunction(placing[i])) {\r\n                    placing[i] = placing[i].apply(node,[]);\r\n                    if (types.isArrayLike(placing[i])) {\r\n                        neddsFlattern = true;\r\n                    }\r\n                }\r\n            }\r\n            if (neddsFlattern) {\r\n                placing = arrays.flatten(placing);\r\n            }\r\n        }\r\n        return placing;\r\n    }\r\n    function after(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone),\r\n                refNode = refNode.nextSibling;\r\n\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                if (refNode) {\r\n                    parent.insertBefore(nodes[i], refNode);\r\n                } else {\r\n                    parent.appendChild(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function append(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var parentNode = node,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            parentNode.appendChild(nodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function before(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone);\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                parent.insertBefore(nodes[i], refNode);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    function fromPoint(x,y) {\r\n        return document.elementFromPoint(x,y);\r\n    }\r\n\r\n    /**\r\n     * Generate id\r\n     * @param   {HTMLElement} el\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    function generateId(el) {\r\n        var str = el.tagName + el.className + el.src + el.href + el.textContent,\r\n            i = str.length,\r\n            sum = 0;\r\n\r\n        while (i--) {\r\n            sum += str.charCodeAt(i);\r\n        }\r\n\r\n        return sum.toString(36);\r\n    }\r\n\r\n\r\n    /*   \r\n     * insert one or more nodes as the first children of the specified node.\r\n     * @param {Node} node\r\n     * @param {Node or ArrayLike} placing\r\n     * @param {Boolean Optional} copyByClone\r\n     */\r\n    function prepend(node, placing, copyByClone) {\r\n        var parentNode = node,\r\n            refNode = parentNode.firstChild,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (refNode) {\r\n                parentNode.insertBefore(nodes[i], refNode);\r\n            } else {\r\n                parentNode.appendChild(nodes[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    function noder() {\r\n        return noder;\r\n    }\r\n\r\n    Object.assign(noder, {\r\n        after: after,\r\n\r\n        append: append,\r\n\r\n        before: before,\r\n\r\n        blur : function(el) {\r\n            el.blur();\r\n        },\r\n\r\n        body: function() {\r\n            return document.body;\r\n        },\r\n\r\n        generateId,\r\n\r\n        fullscreen: fullscreen,\r\n\r\n        focusable: focusable,\r\n\r\n        fromPoint,\r\n\r\n        isFullscreen,\r\n\r\n        prepend: prepend\r\n    });\r\n\r\n    return skylark.attach(\"domx.noder\" , noder);\r\n});"]}